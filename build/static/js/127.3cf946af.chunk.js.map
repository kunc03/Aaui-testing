{"version":3,"sources":["components/Users/User/companyadd.js"],"names":["UserAdd","Component","state","company_id","branch_id","grup_id","identity","name","email","alertemail","phone","address","password","level","unlimited","validity","Date","listCompany","listBranch","listGrup","responseMessage","responseEmail","responsePhone","optionsGroup","valueGroup","handleChangeValidity","date","this","setState","onChangeInput","event","target","value","API","get","API_SERVER","then","res","data","error","length","slice","maxLength","submitForm","e","preventDefault","formData","group","status","toISOString","split","toast","warning","post","result","Storage","props","history","push","toggleSwitch","checked","componentDidMount","USER_ME","localStorage","getItem","map","item","label","branch_name","render","className","onSubmit","Text","id","options","onChange","mode","enableSearch","resetable","valuePlaceholder","required","grup_name","type","placeholder","style","textTransform","htmlFor","width","bind","selected","showTimeSelect","dateFormat","marginTop","class","role"],"mappings":"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","file":"static/js/127.3cf946af.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form } from 'react-bootstrap';\nimport API, { USER_ME, API_SERVER } from '../../../repository/api';\nimport Storage from '../../../repository/storage';\nimport ToggleSwitch from \"react-switch\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { MultiSelect } from 'react-sm-select';\nimport { toast } from \"react-toastify\";\n\n\nclass UserAdd extends Component {\n\n  state = {\n    company_id: \"\",\n    branch_id: \"\",\n    grup_id: \"\",\n\n    identity: \"\",\n    name: \"\",\n    email: \"\",\n    alertemail: \"\",\n    phone: \"\",\n    address: \"\",\n    password: \"\",\n    level: \"\",\n    unlimited: false,\n    validity: new Date(),\n\n    listCompany: [],\n    listBranch: [],\n    listGrup: [],\n\n    responseMessage: '',\n    responseEmail: '',\n    responsePhone: '',\n    optionsGroup: [],\n    valueGroup: []\n  };\n\n  handleChangeValidity = date => {\n    this.setState({\n      validity: date\n    });\n  };\n\n  toggleSwitch(checked) {\n    this.setState({ unlimited: !this.state.unlimited });\n  }\n  onChangeInput = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    if (name === 'email') {\n      API.get(`${API_SERVER}v1/user/cek/email/${value}`).then(res => {\n        if (res.data.error) {\n          target.value = ''\n          this.setState({ alertemail: 'Email sudah terdaftar dan aktif. gunakan email lain' })\n        } else {\n          this.setState({ [name]: value, alertemail: '' })\n        }\n      })\n    } else if (name === 'address') {\n      if (value.length <= 100) {\n        this.setState({ [name]: value })\n      } else {\n        this.setState({ responseMessage: 'Cannot exceed the character limit.', [name]: value.slice(0, target.maxLength) })\n      }\n    } else {\n      this.setState({ [name]: value })\n    }\n\n  }\n\n  submitForm = e => {\n    e.preventDefault();\n    let unlimited = this.state.unlimited == false ? '1' : '0'\n    const formData = {\n      company_id: this.state.company_id,\n      // branch_id: this.state.branch_id,\n      branch_id: 0,\n      grup_id: this.state.grup_id,\n      group: this.state.valueGroup,\n      identity: this.state.identity,\n      name: this.state.name,\n      email: this.state.email,\n      phone: this.state.phone,\n      address: this.state.address,\n      password: this.state.password,\n      level: this.state.level,\n      status: 'active',\n      unlimited: unlimited,\n      validity: this.state.validity.toISOString().split('T')[0]\n    };\n\n    if (\n      formData.company_id === '' ||\n      formData.group == '' ||\n      formData.grup_id === '' ||\n      formData.name === '' ||\n      formData.identity === '' ||\n      formData.email === '' ||\n      formData.level === ''\n    ){\n      toast.warning('Please fill required field.')\n    }\n    else{\n      API.post(`${API_SERVER}v1/user`, formData).then(res => {\n        if (res.status === 200) {\n          if (res.data.error) {\n            this.setState({ responseMessage: res.data.result })\n          } else {\n            if (Storage.get('User').data.level === 'superadmin') {\n              this.props.history.push('/user')\n            }\n            else {\n              if (Storage.get('User').data.level === 'superadmin') {\n                this.props.history.push('/user')\n              }\n              else {\n                this.props.history.push('/my-company')\n              }\n            }\n          }\n        }\n      })\n    }\n  };\n\n  componentDidMount() {\n    API.get(`${USER_ME}${Storage.get('user').data.email}`).then(res => {\n      if (res.status === 200) {\n        this.setState({ company_id: localStorage.getItem('companyID') ? localStorage.getItem('companyID') : res.data.result.company_id });\n\n        API.get(`${API_SERVER}v1/branch/company/${this.state.company_id}`).then(res => {\n          if (res.status === 200) {\n            this.setState({ listBranch: res.data.result[0] })\n            res.data.result[0].map(item => {\n              this.state.optionsGroup.push({ value: item.branch_id, label: item.branch_name });\n            });\n          }\n        })\n\n        API.get(`${API_SERVER}v1/grup/company/${this.state.company_id}`).then(res => {\n          if (res.status === 200) {\n            this.setState({ listGrup: res.data.result })\n          }\n        })\n      }\n    })\n  }\n\n  render() {\n    const levelUser = [{ level: 'admin' }, { level: 'client' }];\n\n    return (\n      <div className=\"pcoded-main-container\">\n        <div className=\"pcoded-wrapper\">\n          <div className=\"pcoded-content\">\n            <div className=\"pcoded-inner-content\">\n              <div className=\"main-body\">\n                <div className=\"page-wrapper\">\n                  <div className=\"row\">\n                    <div className=\"col-xl-12\">\n                      <h3 className=\"f-24 f-w-800\">User Management</h3>\n                      <div className=\"card\">\n                        <div className=\"card-block\">\n\n                          <form onSubmit={event => this.submitForm(event)}>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Group</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <MultiSelect\n                                id=\"group\"\n                                options={this.state.optionsGroup}\n                                value={this.state.valueGroup}\n                                onChange={valueGroup => this.setState({ valueGroup })}\n                                mode=\"tags\"\n                                enableSearch={true}\n                                resetable={true}\n                                valuePlaceholder=\"Select Group\"\n                              />\n                              {/* <select required className=\"form-control\" name=\"branch_id\" onChange={this.onChangeInput}>\n                                <option value=\"\">-- Select --</option>\n                                {\n                                  this.state.listBranch.map(item => (\n                                    <option value={item.branch_id}>{item.branch_name}</option>\n                                  ))\n                                }\n                              </select> */}\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Role</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <select required className=\"form-control\" name=\"grup_id\" onChange={this.onChangeInput}>\n                                <option value=\"\">-- Select --</option>\n                                {\n                                  this.state.listGrup.map(item => (\n                                    <option value={item.grup_id}>{item.grup_name}</option>\n                                  ))\n                                }\n                              </select>\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\"> Name </label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                required\n                                type=\"text\"\n                                name=\"name\"\n                                className=\"form-control\"\n                                placeholder=\"Name\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\"> Registration Number </label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"text\"\n                                required\n                                name=\"identity\"\n                                className=\"form-control\"\n                                placeholder=\"001\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Email</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"email\"\n                                required\n                                name=\"email\"\n                                className=\"form-control\"\n                                placeholder=\"example@domain.com\"\n                                onChange={this.onChangeInput}\n                              />\n                              <Form.Text className=\"text-danger\">{this.state.alertemail}</Form.Text>\n                              <Form.Text className=\"text-muted\">\n                                Pastikan isi sesuai dengan format email ex. user@email.com\n                              </Form.Text>\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Phone</label>\n                              <input\n                                type=\"text\"\n                                name=\"phone\"\n                                className=\"form-control\"\n                                placeholder=\"08119680220\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Address</label>\n                              <textarea maxLength=\"100\" name=\"address\" className=\"form-control\" placeholder=\"Address\" onChange={this.onChangeInput}></textarea>\n                              <Form.Text className=\"text-muted\">\n                                Maksimal 100 karakter untuk alamat\n                              </Form.Text>\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Level</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <select name=\"level\" className=\"form-control\" onChange={this.onChangeInput} required style={{ textTransform: 'capitalize' }}>\n                                <option value=\"\">-- Select --</option>\n                                {\n                                  levelUser.map(item => (\n                                    <option value={item.level}>{item.level === 'client' ? 'User' : item.level}</option>\n                                  ))\n                                }\n                              </select>\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Password</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"password\"\n                                name=\"password\"\n                                required\n                                className=\"form-control\"\n                                placeholder=\"Password\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\" htmlFor>\n                                Time Limit\n                              </label>\n                              <div style={{ width: '100%' }}>\n                                <ToggleSwitch checked={false} onChange={this.toggleSwitch.bind(this)} checked={this.state.unlimited} />\n                              </div>\n\n                            </div>\n                            {\n                              this.state.unlimited &&\n                              <div className=\"form-group\">\n                                <label className=\"label-input\" htmlFor>\n                                  Valid Until\n                                </label>\n                                <div style={{ width: '100%' }}>\n                                  <DatePicker\n                                    selected={this.state.validity}\n                                    onChange={this.handleChangeValidity}\n                                    showTimeSelect\n                                    dateFormat=\"yyyy-MM-dd\"\n                                  />\n                                </div>\n\n                              </div>\n                            }\n                            <div style={{ marginTop: '50px' }}>\n                              {\n                                this.state.responseMessage &&\n                                <div class=\"alert alert-primary\" role=\"alert\">\n                                  <b>ALERT</b> Please check you data before submit. {this.state.responseMessage}\n                                </div>\n                              }\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-primary btn-block m-t-10 f-20 f-w-600\">\n                              Save\n                            </button>\n                          </form>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserAdd;\n"],"sourceRoot":""}