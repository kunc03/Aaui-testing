{"version":3,"sources":["components/Users/User/Edit.js"],"names":["UserEdit","state","user","user_id","props","match","params","company_id","branch_id","grup_id","optionComapny","valueCompany","level_multicompany","identity","name","email","phone","address","level","password","unlimited","validity","Date","listCompany","listBranch","listGrup","listLevel","optionsGroup","valueGroup","responseMessage","handleChangeValidity","date","setState","console","log","onSubmitEditUser","e","preventDefault","formData","group","status","toISOString","split","toast","warning","API","put","API_SERVER","then","res","data","error","result","delete","i","length","post","Storage","get","history","push","onChangeInput","event","target","value","tempGroup","map","item","label","branch_name","showMultipleCompany","checked","this","except","company_name","filter","group_id","Number","multi_company","validityUser","levelUser","className","onSubmit","Text","required","onChange","selected","style","textTransform","id","options","mode","removableTags","hasSelectAll","selectAllLabel","enableSearch","resetable","valuePlaceholder","evt","grup_name","type","placeholder","htmlFor","width","toggleSwitch","bind","dateFormat","marginTop","class","role","Component"],"mappings":"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","file":"static/js/85.af4ec622.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport API, { API_SERVER } from '../../../repository/api';\r\nimport Storage from '../../../repository/storage';\r\nimport ToggleSwitch from \"react-switch\";\r\nimport { Form } from 'react-bootstrap';\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { MultiSelect } from 'react-sm-select';\r\nimport 'react-sm-select/dist/styles.css';\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass UserEdit extends Component {\r\n  state = {\r\n    user: null,\r\n    user_id: this.props.match.params.user_id,\r\n\r\n    company_id: \"\",\r\n    branch_id: \"\",\r\n    grup_id: \"\",\r\n    optionComapny: [],\r\n    valueCompany: [],\r\n    level_multicompany: 'client',\r\n\r\n    identity: \"\",\r\n    name: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    address: \"\",\r\n    level: \"\",\r\n    password: \"\",\r\n    unlimited: false,\r\n    validity: new Date(),\r\n\r\n    listCompany: [],\r\n    listBranch: [],\r\n    listGrup: [],\r\n    listLevel: [],\r\n    optionsGroup: [],\r\n    valueGroup: [],\r\n\r\n    responseMessage: \"\"\r\n  };\r\n\r\n  handleChangeValidity = date => {\r\n    this.setState({\r\n      validity: date\r\n    });\r\n    console.log('XX datepicker', date)\r\n    console.log('XX state', this.state.validity)\r\n  };\r\n\r\n  toggleSwitch(checked) {\r\n    this.setState({ unlimited: !this.state.unlimited });\r\n  }\r\n  onSubmitEditUser = e => {\r\n    e.preventDefault();\r\n    let unlimited = this.state.unlimited == false ? '1' : '0'\r\n\r\n    let formData = {\r\n      company_id: this.state.company_id,\r\n      // branch_id: this.state.branch_id,\r\n      group: this.state.valueGroup,\r\n      grup_id: this.state.grup_id,\r\n      identity: this.state.identity,\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      phone: this.state.phone,\r\n      address: this.state.address,\r\n      level: this.state.level,\r\n      status: \"active\",\r\n      unlimited: unlimited,\r\n      validity: this.state.validity.toISOString().split('T')[0]\r\n    };\r\n    if (\r\n      formData.company_id === '' ||\r\n      formData.group == '' ||\r\n      formData.grup_id === '' ||\r\n      formData.name === '' ||\r\n      formData.identity === '' ||\r\n      formData.email === '' ||\r\n      formData.level === ''\r\n    ) {\r\n      toast.warning('Please fill required field.')\r\n    }\r\n    else {\r\n      API.put(`${API_SERVER}v1/user/${this.state.user_id}`, formData).then(\r\n        res => {\r\n          if (res.status === 200) {\r\n            if (res.data.error) {\r\n\r\n              this.setState({ responseMessage: res.data.result })\r\n            } else {\r\n\r\n              if (this.state.password !== \"\") {\r\n                let formData = { password: this.state.password };\r\n                API.put(\r\n                  `${API_SERVER}v1/user/password/${this.state.user_id}`,\r\n                  formData\r\n                ).then(res => {\r\n                  console.log(\"pass: \", res.data);\r\n                });\r\n              }\r\n              API.delete(`${API_SERVER}v1/user/assign/${this.state.user_id}`).then(res => {\r\n                if (res.status === 200) {\r\n                  for (let i = 0; i < this.state.valueCompany.length; i++) {\r\n                    let formData = {\r\n                      user_id: this.state.user_id,\r\n                      company_id: this.state.valueCompany[i],\r\n                      level_multicompany: this.state.level_multicompany\r\n                    };\r\n                    API.post(`${API_SERVER}v1/user/assign`, formData)\r\n                  }\r\n                }\r\n              })\r\n\r\n              if (Storage.get(\"user\").data.level === \"superadmin\") {\r\n                this.props.history.push(`/company-detail-super/${formData.company_id}`)\r\n              } else {\r\n                this.props.history.push(`/user-company/${this.state.company_id}`);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  onChangeInput = event => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    if (name === \"company_id\") {\r\n      API.get(`${API_SERVER}v1/branch/company/${value}`).then(res => {\r\n        if (res.status === 200) {\r\n          this.setState({ listBranch: res.data.result[0], company_id: value, listGrup: res.data.result[1] });\r\n          let tempGroup = [];\r\n          res.data.result[0].map(item => {\r\n            tempGroup.push({ value: item.branch_id, label: item.branch_name });\r\n          });\r\n          this.setState({ valueGroup: [] })\r\n          this.setState({ optionsGroup: tempGroup })\r\n          this.showMultipleCompany(value)\r\n        }\r\n      });\r\n    } else {\r\n      this.setState({\r\n        [name]: value\r\n      });\r\n    }\r\n  };\r\n\r\n  showMultipleCompany(except) {\r\n    API.get(`${API_SERVER}v1/company`).then(res => {\r\n      this.setState({ valueCompany: [] })\r\n      this.setState({ optionComapny: [] })\r\n      res.data.result.map(item => {\r\n        this.state.optionComapny.push({ value: item.company_id, label: item.company_name });\r\n      });\r\n      this.setState({\r\n        optionComapny: this.state.optionComapny.filter(item => item.value != except),\r\n      })\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    let valueGroup = [];\r\n    API.get(`${API_SERVER}v1/user/${this.state.user_id}`).then(res => {\r\n      if (res.status === 200) {\r\n        let unlimited = res.data.result.unlimited == 0 ? true : false;\r\n        this.setState({\r\n          user: res.data.result,\r\n          company_id: res.data.result.company_id,\r\n          branch_id: res.data.result.branch_id,\r\n          grup_id: res.data.result.grup_id,\r\n          name: res.data.result.name,\r\n          identity: res.data.result.identity,\r\n          email: res.data.result.email,\r\n          phone: res.data.result.phone,\r\n          address: res.data.result.address,\r\n          level: res.data.result.level,\r\n          unlimited: unlimited,\r\n          validity: new Date(res.data.result.validity),\r\n          level_multicompany: res.data.result.level_multicompany\r\n        });\r\n        valueGroup = res.data.result.group_id ? res.data.result.group_id.split(',').map(Number) : [];\r\n\r\n        API.get(`${API_SERVER}v1/company`).then(res => {\r\n          if (res.status === 200) {\r\n            this.setState({ listCompany: res.data.result });\r\n          }\r\n          res.data.result.map(item => {\r\n            this.state.optionComapny.push({ value: item.company_id, label: item.company_name });\r\n          });\r\n          this.setState({\r\n            optionComapny: this.state.optionComapny.filter(item => item.value != this.state.company_id),\r\n          })\r\n        });\r\n\r\n        API.get(\r\n          `${API_SERVER}v1/branch/company/${this.state.user.company_id}`\r\n        ).then(res => {\r\n          if (res.status === 200) {\r\n            this.setState({ listBranch: res.data.result[0], listGrup: res.data.result[1] });\r\n            let tempGroup = [];\r\n            res.data.result[0].map(item => {\r\n              tempGroup.push({ value: item.branch_id, label: item.branch_name });\r\n            });\r\n            this.setState({ optionsGroup: tempGroup })\r\n          }\r\n        });\r\n\r\n        API.get(\r\n          `${API_SERVER}v1/user/assign/${this.state.user_id}`\r\n        ).then(res => {\r\n          if (res.status === 200) {\r\n            this.setState({ valueCompany: res.data.result.multi_company })\r\n            this.setState({ valueGroup: valueGroup })\r\n          }\r\n        });\r\n\r\n        const levelUser = [\r\n          { level: \"superadmin\" },\r\n          { level: \"admin\" },\r\n          { level: \"client\" }\r\n        ];\r\n        this.setState({ listLevel: levelUser });\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let validityUser = \"\";\r\n    if (this.state.validity !== \"\") {\r\n      validityUser = new Date(this.state.validity);\r\n    }\r\n    const levelUser = this.state.listLevel;\r\n\r\n    return (\r\n      <div className=\"pcoded-main-container\">\r\n        <div className=\"pcoded-wrapper\">\r\n          <div className=\"pcoded-content\">\r\n            <div className=\"pcoded-inner-content\">\r\n              <div className=\"main-body\">\r\n                <div className=\"page-wrapper\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-xl-12\">\r\n                      <h3 className=\"f-24 f-w-800\">Edit User Management</h3>\r\n                      <div className=\"card\">\r\n                        <div className=\"card-block\">\r\n                          <form onSubmit={this.onSubmitEditUser}>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Company</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <select\r\n                                required\r\n                                className=\"form-control\"\r\n                                name=\"company_id\"\r\n                                onChange={this.onChangeInput}\r\n                              >\r\n                                <option value=\"\">-- Select --</option>\r\n                                {this.state.listCompany.map(item => (\r\n                                  <option\r\n                                    value={item.company_id}\r\n                                    selected={\r\n                                      item.company_id ===\r\n                                        this.state.user.company_id\r\n                                        ? \"selected\"\r\n                                        : \"\"\r\n                                    }\r\n                                  >\r\n                                    {item.company_name}\r\n                                  </option>\r\n                                ))}\r\n                              </select>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Level</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <select\r\n                                style={{ textTransform: 'capitalize' }}\r\n                                name=\"level\"\r\n                                className=\"form-control\"\r\n                                onChange={this.onChangeInput}\r\n                                required\r\n                              >\r\n                                <option value=\"\">-- Select --</option>\r\n                                {levelUser.map(item => (\r\n                                  <option\r\n                                    value={item.level}\r\n                                    selected={\r\n                                      item.level === this.state.user.level\r\n                                        ? \"selected\"\r\n                                        : \"\"\r\n                                    }\r\n                                  >\r\n                                    {item.level === 'client' ? 'User' : item.level}\r\n                                  </option>\r\n                                ))}\r\n                              </select>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Multiple Company</label>\r\n                              <MultiSelect\r\n                                id=\"multicompany\"\r\n                                options={this.state.optionComapny}\r\n                                value={this.state.valueCompany}\r\n                                onChange={valueCompany => this.setState({ valueCompany })}\r\n                                mode=\"tags\"\r\n                                removableTags={true}\r\n                                hasSelectAll={true}\r\n                                selectAllLabel=\"Choose all\"\r\n                                enableSearch={true}\r\n                                resetable={true}\r\n                                valuePlaceholder=\"Select Company\"\r\n                              />\r\n                            </div>\r\n                            {\r\n                              this.state.valueCompany.length > 0 ?\r\n\r\n                                <div className=\"form-group\">\r\n                                  <label className=\"label-input\">Level Multicompany</label>\r\n                                  <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                                  <select\r\n                                    style={{ textTransform: 'capitalize' }}\r\n                                    name=\"level_multicompany\"\r\n                                    className=\"form-control\"\r\n                                    onChange={evt => this.setState({ level_multicompany: evt.target.value })}\r\n                                    required\r\n                                  >\r\n                                    <option value=\"\">-- Select --</option>\r\n                                    {levelUser.map(item => (\r\n                                      <option\r\n                                        value={item.level}\r\n                                        selected={\r\n                                          item.level === this.state.level_multicompany\r\n                                            ? \"selected\"\r\n                                            : \"\"\r\n                                        }\r\n                                      >\r\n                                        {item.level === 'client' ? 'User' : item.level}\r\n                                      </option>\r\n                                    ))}\r\n                                  </select>\r\n                                </div>\r\n                                : null\r\n                            }\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Group</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <MultiSelect\r\n                                id=\"group\"\r\n                                options={this.state.optionsGroup}\r\n                                value={this.state.valueGroup}\r\n                                onChange={valueGroup => this.setState({ valueGroup })}\r\n                                mode=\"tags\"\r\n                                enableSearch={true}\r\n                                resetable={true}\r\n                                valuePlaceholder=\"Select Group\"\r\n                              />\r\n                              {/* <select\r\n                                required\r\n                                className=\"form-control\"\r\n                                name=\"branch_id\"\r\n                                onChange={this.onChangeInput}\r\n                              >\r\n                                <option value=\"\">-- Select --</option>\r\n                                {this.state.listBranch.map(item => (\r\n                                  <option\r\n                                    value={item.branch_id}\r\n                                    selected={\r\n                                      item.branch_id ===\r\n                                      this.state.user.branch_id\r\n                                        ? \"selected\"\r\n                                        : \"\"\r\n                                    }\r\n                                  >\r\n                                    {item.branch_name}\r\n                                  </option>\r\n                                ))}\r\n                              </select> */}\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Role</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <select\r\n                                required\r\n                                className=\"form-control\"\r\n                                name=\"grup_id\"\r\n                                onChange={this.onChangeInput}\r\n                              >\r\n                                <option value=\"\">-- Select --</option>\r\n                                {this.state.listGrup.map(item => (\r\n                                  <option\r\n                                    value={item.grup_id}\r\n                                    selected={\r\n                                      item.grup_id ===\r\n                                        this.state.user.grup_id\r\n                                        ? \"selected\"\r\n                                        : \"\"\r\n                                    }\r\n                                  >\r\n                                    {item.grup_name}\r\n                                  </option>\r\n                                ))}\r\n                              </select>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\"> Name </label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                required\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Name\"\r\n                                value={this.state.name}\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\"> Registration Number </label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                type=\"text\"\r\n                                required\r\n                                name=\"identity\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"210-1971-74\"\r\n                                value={this.state.identity}\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Email</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                type=\"email\"\r\n                                required\r\n                                name=\"email\"\r\n                                value={this.state.email}\r\n                                className=\"form-control\"\r\n                                placeholder=\"rakaal@gmail.com\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Phone</label>\r\n                              <input\r\n                                type=\"text\"\r\n                                name=\"phone\"\r\n                                value={this.state.phone}\r\n                                className=\"form-control\"\r\n                                placeholder=\"081-247-9592\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Address</label>\r\n                              <textarea\r\n                                value={this.state.address}\r\n                                name=\"address\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Address\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n                            {/* <div className=\"form-group\">\r\n                              <label className=\"label-input\">Password</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"password\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div> */}\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\" htmlFor>\r\n                                Time Limit\r\n                              </label>\r\n                              <div style={{ width: '100%' }}>\r\n                                <ToggleSwitch checked={false} onChange={this.toggleSwitch.bind(this)} checked={this.state.unlimited} />\r\n                              </div>\r\n\r\n                            </div>\r\n                            {\r\n                              this.state.unlimited &&\r\n                              <div className=\"form-group\">\r\n                                <label className=\"label-input\" htmlFor>\r\n                                  Valid Until\r\n                                </label>\r\n                                <div style={{ width: '100%' }}>\r\n                                  <DatePicker\r\n                                    selected={validityUser}\r\n                                    onChange={this.handleChangeValidity}\r\n                                    dateFormat=\"yyyy-MM-dd\"\r\n                                  />\r\n                                </div>\r\n\r\n                              </div>\r\n                            }\r\n                            <div style={{ marginTop: '50px' }}>\r\n                              {\r\n                                this.state.responseMessage &&\r\n                                <div class=\"alert alert-primary\" role=\"alert\">\r\n                                  <b>ALERT</b> Please check you data before submit. {this.state.responseMessage}\r\n                                </div>\r\n                              }\r\n                            </div>\r\n                            <button\r\n                              type=\"submit\"\r\n                              className=\"btn btn-primary btn-block m-t-100 f-20 f-w-600\"\r\n                            >\r\n                              Save\r\n                            </button>\r\n                          </form>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserEdit;\r\n"],"sourceRoot":""}