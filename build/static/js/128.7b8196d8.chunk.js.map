{"version":3,"sources":["components/Users/User/companyedit.js"],"names":["UserEdit","Component","state","user","user_id","this","props","match","params","company_id","branch_id","grup_id","identity","name","email","phone","address","level","password","unlimited","validity","Date","listCompany","listBranch","listGrup","listLevel","optionsGroup","valueGroup","responseMessage","handleChangeValidity","date","setState","onSubmitEditUser","e","preventDefault","formData","group","status","toISOString","split","toast","warning","API","put","API_SERVER","then","res","console","log","data","Storage","get","history","push","onChangeInput","event","target","value","result","length","slice","maxLength","toggleSwitch","checked","componentDidMount","localStorage","getItem","group_id","map","Number","tempGroup","item","label","branch_name","levelUser","render","validityUser","className","onSubmit","Text","id","options","onChange","mode","enableSearch","resetable","valuePlaceholder","required","selected","grup_name","type","placeholder","style","textTransform","htmlFor","width","bind","dateFormat"],"mappings":"2GAAA,gHAWA,MAAMA,UAAiBC,YAAW,cAAD,yBAE/BC,MAAQ,CACNC,KAAM,KACNC,QAASC,KAAKC,MAAMC,MAAMC,OAAOJ,QAEjCK,WAAY,GACZC,UAAW,GACXC,QAAS,GAETC,SAAU,GACVC,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,MAAO,GACPC,SAAU,GACVC,WAAW,EACXC,SAAU,IAAIC,KAEdC,YAAa,GACbC,WAAY,GACZC,SAAU,GACVC,UAAW,GACXC,aAAc,GACdC,WAAY,GAEZC,gBAAiB,IA3BY,KA8B/BC,qBAAuBC,IACrBzB,KAAK0B,SAAS,CACZX,SAAUU,KAhCiB,KAuC/BE,iBAAmBC,IACjBA,EAAEC,iBACF,IAAIf,EAAoC,GAAxBd,KAAKH,MAAMiB,UAAqB,IAAM,IAClDgB,EAAW,CACb1B,WAAYJ,KAAKH,MAAMO,WAEvB2B,MAAO/B,KAAKH,MAAMyB,WAClBhB,QAASN,KAAKH,MAAMS,QACpBC,SAAUP,KAAKH,MAAMU,SAAUC,KAAMR,KAAKH,MAAMW,KAAMC,MAAOT,KAAKH,MAAMY,MACxEC,MAAOV,KAAKH,MAAMa,MAAOC,QAASX,KAAKH,MAAMc,QAASC,MAAOZ,KAAKH,MAAMe,MACxEoB,OAAQ,SACRlB,UAAWA,EACXC,SAAUf,KAAKH,MAAMkB,SAASkB,cAAcC,MAAM,KAAK,IAI/B,KAAxBJ,EAAS1B,YACS,IAAlB0B,EAASC,OACY,KAArBD,EAASxB,SACS,KAAlBwB,EAAStB,MACa,KAAtBsB,EAASvB,UACU,KAAnBuB,EAASrB,OACU,KAAnBqB,EAASlB,MAETuB,IAAMC,QAAQ,+BAGdC,IAAIC,IAAJ,UAAWC,IAAX,mBAAgCvC,KAAKH,MAAME,SAAW+B,GAAUU,KAAKC,IACnE,GAAmB,MAAfA,EAAIT,OAAgB,CAEtB,GAA4B,KAAxBhC,KAAKH,MAAMgB,SAAiB,CAC9B,IAAIiB,EAAW,CAAEjB,SAAUb,KAAKH,MAAMgB,UACtCwB,IAAIC,IAAJ,UAAWC,IAAX,4BAAyCvC,KAAKH,MAAME,SAAW+B,GAAUU,KAAKC,IAC5EC,QAAQC,IAAI,SAAUF,EAAIG,QAIS,eAAnCC,IAAQC,IAAI,QAAQF,KAAKhC,MAC3BZ,KAAKC,MAAM8C,QAAQC,KAAK,SAExBhD,KAAKC,MAAM8C,QAAQC,KAAnB,mBA/EqB,KAsF/BC,cAAiBC,IACf,MAAMC,EAASD,EAAMC,OACfC,EAAQD,EAAOC,MACf5C,EAAO2C,EAAO3C,KAEP,eAATA,EACF6B,IAAIS,IAAJ,UAAWP,IAAX,6BAA0Ca,IAASZ,KAAKC,IACnC,MAAfA,EAAIT,QACNhC,KAAK0B,SAAS,CAAER,WAAYuB,EAAIG,KAAKS,OAAO,GAAIjD,WAAYgD,MAG9C,UAAT5C,EAKTR,KAAK0B,SAAS,CAAE,CAAClB,GAAO4C,IAGN,YAAT5C,EACL4C,EAAME,QAAU,IAClBtD,KAAK0B,SAAS,CAAE,CAAClB,GAAO4C,IAExBpD,KAAK0B,SAAS,CAAEH,gBAAiB,qCAAsC,CAACf,GAAO4C,EAAMG,MAAM,EAAGJ,EAAOK,aAGvGxD,KAAK0B,SAAS,CACZ,CAAClB,GAAO4C,KA7EdK,aAAaC,GACX1D,KAAK0B,SAAS,CAAEZ,WAAYd,KAAKH,MAAMiB,YAiFzC6C,oBACE,IAAIrC,EAAa,GACjBe,IAAIS,IAAJ,UAAWP,IAAX,mBAAgCvC,KAAKH,MAAME,UAAWyC,KAAKC,IACzD,GAAmB,MAAfA,EAAIT,OAAgB,CACtB,IAAIlB,EAAyC,GAA7B2B,EAAIG,KAAKS,OAAOvC,UAChCd,KAAK0B,SAAS,CACZ5B,KAAM2C,EAAIG,KAAKS,OACfjD,WAAYwD,aAAaC,QAAQ,aAAeD,aAAaC,QAAQ,aAAepB,EAAIG,KAAKS,OAAOjD,WACpGC,UAAWoC,EAAIG,KAAKS,OAAOhD,UAC3BC,QAASmC,EAAIG,KAAKS,OAAO/C,QACzBE,KAAMiC,EAAIG,KAAKS,OAAO7C,KACtBD,SAAUkC,EAAIG,KAAKS,OAAO9C,SAC1BE,MAAOgC,EAAIG,KAAKS,OAAO5C,MACvBC,MAAO+B,EAAIG,KAAKS,OAAO3C,MACvBC,QAAS8B,EAAIG,KAAKS,OAAO1C,QACzBC,MAAO6B,EAAIG,KAAKS,OAAOzC,MACvBE,UAAWA,EACXC,SAAU,IAAIC,KAAKyB,EAAIG,KAAKS,OAAOtC,YAErCO,EAAamB,EAAIG,KAAKS,OAAOS,SAAWrB,EAAIG,KAAKS,OAAOS,SAAS5B,MAAM,KAAK6B,IAAIC,QAAU,GAE1F3B,IAAIS,IAAJ,UAAWP,IAAX,6BAA0CvC,KAAKH,MAAMC,KAAKM,aAAcoC,KAAKC,IAC3E,GAAmB,MAAfA,EAAIT,OAAgB,CACtBhC,KAAK0B,SAAS,CAAER,WAAYuB,EAAIG,KAAKS,OAAO,KAC5C,IAAIY,EAAU,GACdxB,EAAIG,KAAKS,OAAO,GAAGU,IAAIG,IACrBD,EAAUjB,KAAK,CAACI,MAAOc,EAAK7D,UAAW8D,MAAOD,EAAKE,gBAErDpE,KAAK0B,SAAS,CAACL,aAAc4C,OAIjC5B,IAAIS,IAAJ,UAAWP,IAAX,2BAAwCvC,KAAKH,MAAMC,KAAKM,aAAcoC,KAAKC,IACtD,MAAfA,EAAIT,SACNhC,KAAK0B,SAAS,CAAEJ,WAAYA,IAC5BtB,KAAK0B,SAAS,CAAEP,SAAUsB,EAAIG,KAAKS,YAIvC,MAAMgB,EAAY,CAAC,CAAEzD,MAAO,SAAW,CAAEA,MAAO,WAChDZ,KAAK0B,SAAS,CAAEN,UAAWiD,OAKjCC,SACE,IAAIC,EAAe,GACS,KAAxBvE,KAAKH,MAAMkB,WACbwD,EAAe,IAAIvD,KAAKhB,KAAKH,MAAMkB,WAErC,MAAMsD,EAAYrE,KAAKH,MAAMuB,UAE7B,OACE,yBAAKoD,UAAU,yBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,gBAAd,mBACA,yBAAKA,UAAU,QACb,yBAAKA,UAAU,cAEb,0BAAMC,SAAUzE,KAAK2B,kBACnB,yBAAK6C,UAAU,cACb,2BAAOA,UAAU,eAAjB,SACA,kBAAC,IAAKE,KAAN,CAAWF,UAAU,eAArB,YACA,kBAAC,cAAD,CACEG,GAAG,QACHC,QAAS5E,KAAKH,MAAMwB,aACpB+B,MAAOpD,KAAKH,MAAMyB,WAClBuD,SAAUvD,GAActB,KAAK0B,SAAS,CAAEJ,eACxCwD,KAAK,OACLC,cAAc,EACdC,WAAW,EACXC,iBAAiB,kBAYrB,yBAAKT,UAAU,cACb,2BAAOA,UAAU,eAAjB,QACA,kBAAC,IAAKE,KAAN,CAAWF,UAAU,eAArB,YACA,4BAAQU,UAAQ,EAACV,UAAU,eAAehE,KAAK,UAAUqE,SAAU7E,KAAKiD,eACtE,4BAAQG,MAAM,IAAd,gBAEEpD,KAAKH,MAAMsB,SAAS4C,IAAIG,GACtB,4BAAQd,MAAOc,EAAK5D,QAAS6E,SAAWjB,EAAK5D,UAAYN,KAAKH,MAAMC,KAAKQ,QAAW,WAAa,IAAK4D,EAAKkB,cAMnH,yBAAKZ,UAAU,cACb,2BAAOA,UAAU,eAAjB,UACA,kBAAC,IAAKE,KAAN,CAAWF,UAAU,eAArB,YACA,2BACEU,UAAQ,EACRG,KAAK,OACL7E,KAAK,OACLgE,UAAU,eACVc,YAAY,OACZlC,MAAOpD,KAAKH,MAAMW,KAClBqE,SAAU7E,KAAKiD,iBAGnB,yBAAKuB,UAAU,cACb,2BAAOA,UAAU,eAAjB,yBACA,kBAAC,IAAKE,KAAN,CAAWF,UAAU,eAArB,YACA,2BACEa,KAAK,OACLH,UAAQ,EACR1E,KAAK,WACLgE,UAAU,eACVc,YAAY,cACZlC,MAAOpD,KAAKH,MAAMU,SAClBsE,SAAU7E,KAAKiD,iBAGnB,yBAAKuB,UAAU,cACb,2BAAOA,UAAU,eAAjB,SACA,kBAAC,IAAKE,KAAN,CAAWF,UAAU,eAArB,YACA,2BACEa,KAAK,QACLH,UAAQ,EACR1E,KAAK,QACL4C,MAAOpD,KAAKH,MAAMY,MAClB+D,UAAU,eACVc,YAAY,mBACZT,SAAU7E,KAAKiD,gBAEjB,kBAAC,IAAKyB,KAAN,CAAWF,UAAU,cAArB,+DAIF,yBAAKA,UAAU,cACb,2BAAOA,UAAU,eAAjB,SACA,2BACEa,KAAK,OACL7E,KAAK,QACL4C,MAAOpD,KAAKH,MAAMa,MAClB8D,UAAU,eACVc,YAAY,eACZT,SAAU7E,KAAKiD,iBAGnB,yBAAKuB,UAAU,cACb,2BAAOA,UAAU,eAAjB,WACA,8BAAUpB,MAAOpD,KAAKH,MAAMc,QAASH,KAAK,UAAUgE,UAAU,eAAec,YAAY,UAAUT,SAAU7E,KAAKiD,iBAGpH,yBAAKuB,UAAU,cACb,2BAAOA,UAAU,eAAjB,SACA,kBAAC,IAAKE,KAAN,CAAWF,UAAU,eAArB,YACA,4BAAQe,MAAO,CAAEC,cAAe,cAAgBhF,KAAK,QAAQgE,UAAU,eAAeK,SAAU7E,KAAKiD,cAAeiC,UAAQ,GAC1H,4BAAQ9B,MAAM,IAAd,gBAEEiB,EAAUN,IAAIG,GACZ,4BAAQd,MAAOc,EAAKtD,MAAOuE,SAAWjB,EAAKtD,QAAUZ,KAAKH,MAAMC,KAAKc,MAAS,WAAa,IAAoB,WAAfsD,EAAKtD,MAAqB,OAASsD,EAAKtD,UAgBhJ,yBAAK4D,UAAU,cACb,2BAAOA,UAAU,cAAciB,SAAO,GAAtC,cAGA,yBAAKF,MAAO,CAAEG,MAAO,SACnB,kBAAC,IAAD,CAAchC,SAAS,EAAOmB,SAAU7E,KAAKyD,aAAakC,KAAK3F,MAAO0D,QAAS1D,KAAKH,MAAMiB,cAK5Fd,KAAKH,MAAMiB,WACX,yBAAK0D,UAAU,cACb,2BAAOA,UAAU,cAAciB,SAAO,GAAtC,eAGA,yBAAKF,MAAO,CAAEG,MAAO,SACnB,kBAAC,IAAD,CACEP,SAAUZ,EACVM,SAAU7E,KAAKwB,qBACfoE,WAAW,iBAMnB,4BAAQP,KAAK,SAASb,UAAU,kDAAhC,oBAkBb7E","file":"static/js/128.7b8196d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form } from 'react-bootstrap'\nimport API, { API_SERVER } from '../../../repository/api';\nimport Storage from '../../../repository/storage';\nimport ToggleSwitch from \"react-switch\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { MultiSelect } from 'react-sm-select';\nimport { toast } from \"react-toastify\";\n\nclass UserEdit extends Component {\n\n  state = {\n    user: null,\n    user_id: this.props.match.params.user_id,\n\n    company_id: \"\",\n    branch_id: \"\",\n    grup_id: \"\",\n\n    identity: \"\",\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    level: \"\",\n    password: \"\",\n    unlimited: false,\n    validity: new Date(),\n\n    listCompany: [],\n    listBranch: [],\n    listGrup: [],\n    listLevel: [],\n    optionsGroup: [],\n    valueGroup: [],\n\n    responseMessage: '',\n  }\n\n  handleChangeValidity = date => {\n    this.setState({\n      validity: date\n    });\n  };\n\n  toggleSwitch(checked) {\n    this.setState({ unlimited: !this.state.unlimited });\n  }\n  onSubmitEditUser = e => {\n    e.preventDefault();\n    let unlimited = this.state.unlimited == false ? '1' : '0'\n    let formData = {\n      company_id: this.state.company_id,\n      // branch_id: this.state.branch_id,\n      group: this.state.valueGroup,\n      grup_id: this.state.grup_id,\n      identity: this.state.identity, name: this.state.name, email: this.state.email,\n      phone: this.state.phone, address: this.state.address, level: this.state.level,\n      status: 'active',\n      unlimited: unlimited,\n      validity: this.state.validity.toISOString().split('T')[0]\n    };\n\n    if (\n      formData.company_id === '' ||\n      formData.group == '' ||\n      formData.grup_id === '' ||\n      formData.name === '' ||\n      formData.identity === '' ||\n      formData.email === '' ||\n      formData.level === ''\n    ){\n      toast.warning('Please fill required field.')\n    }\n    else{\n      API.put(`${API_SERVER}v1/user/${this.state.user_id}`, formData).then(res => {\n        if (res.status === 200) {\n  \n          if (this.state.password !== '') {\n            let formData = { password: this.state.password };\n            API.put(`${API_SERVER}v1/user/password/${this.state.user_id}`, formData).then(res => {\n              console.log('pass: ', res.data)\n            })\n          }\n  \n          if (Storage.get('user').data.level === 'superadmin') {\n            this.props.history.push('/user')\n          } else {\n            this.props.history.push(`/my-company`)\n          }\n        }\n      })\n    }\n  }\n\n  onChangeInput = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    if (name === 'company_id') {\n      API.get(`${API_SERVER}v1/branch/company/${value}`).then(res => {\n        if (res.status === 200) {\n          this.setState({ listBranch: res.data.result[0], company_id: value })\n        }\n      })\n    } else if (name === 'email') {\n      // API.get(`${API_SERVER}v1/user/cek/email/${value}`).then(res => {\n      //   if (res.data.error) {\n      //     target.value = ''\n      //   } else {\n      this.setState({ [name]: value })\n      //   }\n      // })\n    } else if (name === 'address') {\n      if (value.length <= 100) {\n        this.setState({ [name]: value })\n      } else {\n        this.setState({ responseMessage: 'Cannot exceed the character limit.', [name]: value.slice(0, target.maxLength) })\n      }\n    } else {\n      this.setState({\n        [name]: value\n      });\n    }\n  }\n\n  componentDidMount() {\n    let valueGroup = [];\n    API.get(`${API_SERVER}v1/user/${this.state.user_id}`).then(res => {\n      if (res.status === 200) {\n        let unlimited = res.data.result.unlimited == 0 ? true : false;\n        this.setState({\n          user: res.data.result,\n          company_id: localStorage.getItem('companyID') ? localStorage.getItem('companyID') : res.data.result.company_id,\n          branch_id: res.data.result.branch_id,\n          grup_id: res.data.result.grup_id,\n          name: res.data.result.name,\n          identity: res.data.result.identity,\n          email: res.data.result.email,\n          phone: res.data.result.phone,\n          address: res.data.result.address,\n          level: res.data.result.level,\n          unlimited: unlimited,\n          validity: new Date(res.data.result.validity),\n        });\n        valueGroup = res.data.result.group_id ? res.data.result.group_id.split(',').map(Number) : [];\n\n        API.get(`${API_SERVER}v1/branch/company/${this.state.user.company_id}`).then(res => {\n          if (res.status === 200) {\n            this.setState({ listBranch: res.data.result[0] })\n            let tempGroup=[];\n            res.data.result[0].map(item => {\n              tempGroup.push({value: item.branch_id, label: item.branch_name});\n            });\n            this.setState({optionsGroup: tempGroup})\n          }\n        })\n\n        API.get(`${API_SERVER}v1/grup/company/${this.state.user.company_id}`).then(res => {\n          if (res.status === 200) {\n            this.setState({ valueGroup: valueGroup })\n            this.setState({ listGrup: res.data.result })\n          }\n        })\n\n        const levelUser = [{ level: 'admin' }, { level: 'client' }];\n        this.setState({ listLevel: levelUser });\n      }\n    })\n  }\n\n  render() {\n    let validityUser = \"\";\n    if (this.state.validity !== \"\") {\n      validityUser = new Date(this.state.validity);\n    }\n    const levelUser = this.state.listLevel;\n\n    return (\n      <div className=\"pcoded-main-container\">\n        <div className=\"pcoded-wrapper\">\n          <div className=\"pcoded-content\">\n            <div className=\"pcoded-inner-content\">\n              <div className=\"main-body\">\n                <div className=\"page-wrapper\">\n                  <div className=\"row\">\n                    <div className=\"col-xl-12\">\n                      <h3 className=\"f-24 f-w-800\">User Management</h3>\n                      <div className=\"card\">\n                        <div className=\"card-block\">\n\n                          <form onSubmit={this.onSubmitEditUser}>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Group</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <MultiSelect\n                                id=\"group\"\n                                options={this.state.optionsGroup}\n                                value={this.state.valueGroup}\n                                onChange={valueGroup => this.setState({ valueGroup })}\n                                mode=\"tags\"\n                                enableSearch={true}\n                                resetable={true}\n                                valuePlaceholder=\"Select Group\"\n                              />\n                              {/* <select required className=\"form-control\" name=\"branch_id\" onChange={this.onChangeInput}>\n                                <option value=\"\">-- Select --</option>\n                                {\n                                  this.state.listBranch.map(item => (\n                                    <option value={item.branch_id} selected={(item.branch_id === this.state.user.branch_id) ? 'selected': ''}>{item.branch_name}</option>\n                                  ))\n                                }\n                              </select> */}\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Role</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <select required className=\"form-control\" name=\"grup_id\" onChange={this.onChangeInput}>\n                                <option value=\"\">-- Select --</option>\n                                {\n                                  this.state.listGrup.map(item => (\n                                    <option value={item.grup_id} selected={(item.grup_id === this.state.user.grup_id) ? 'selected' : ''}>{item.grup_name}</option>\n                                  ))\n                                }\n                              </select>\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\"> Name </label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                required\n                                type=\"text\"\n                                name=\"name\"\n                                className=\"form-control\"\n                                placeholder=\"Name\"\n                                value={this.state.name}\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\"> Registration Number </label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"text\"\n                                required\n                                name=\"identity\"\n                                className=\"form-control\"\n                                placeholder=\"210-1971-74\"\n                                value={this.state.identity}\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Email</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"email\"\n                                required\n                                name=\"email\"\n                                value={this.state.email}\n                                className=\"form-control\"\n                                placeholder=\"rakaal@gmail.com\"\n                                onChange={this.onChangeInput}\n                              />\n                              <Form.Text className=\"text-muted\">\n                                Pastikan isi sesuai dengan format email ex. user@email.com\n                              </Form.Text>\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Phone</label>\n                              <input\n                                type=\"text\"\n                                name=\"phone\"\n                                value={this.state.phone}\n                                className=\"form-control\"\n                                placeholder=\"081-247-9592\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Address</label>\n                              <textarea value={this.state.address} name=\"address\" className=\"form-control\" placeholder=\"Address\" onChange={this.onChangeInput} />\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Level</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <select style={{ textTransform: 'capitalize' }} name=\"level\" className=\"form-control\" onChange={this.onChangeInput} required>\n                                <option value=\"\">-- Select --</option>\n                                {\n                                  levelUser.map(item => (\n                                    <option value={item.level} selected={(item.level === this.state.user.level) ? 'selected' : ''}>{item.level === 'client' ? 'User' : item.level}</option>\n                                  ))\n                                }\n                              </select>\n                            </div>\n                            {/* <div className=\"form-group\">\n                              <label className=\"label-input\">Password</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"password\"\n                                name=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"password\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div> */}\n                            <div className=\"form-group\">\n                              <label className=\"label-input\" htmlFor>\n                                Time Limit\n                              </label>\n                              <div style={{ width: '100%' }}>\n                                <ToggleSwitch checked={false} onChange={this.toggleSwitch.bind(this)} checked={this.state.unlimited} />\n                              </div>\n\n                            </div>\n                            {\n                              this.state.unlimited &&\n                              <div className=\"form-group\">\n                                <label className=\"label-input\" htmlFor>\n                                  Valid Until\n                                </label>\n                                <div style={{ width: '100%' }}>\n                                  <DatePicker\n                                    selected={validityUser}\n                                    onChange={this.handleChangeValidity}\n                                    dateFormat=\"yyyy-MM-dd\"\n                                  />\n                                </div>\n\n                              </div>\n                            }\n                            <button type=\"submit\" className=\"btn btn-primary btn-block m-t-100 f-20 f-w-600\">\n                              Save\n                            </button>\n                          </form>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserEdit;\n"],"sourceRoot":""}