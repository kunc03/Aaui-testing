{"version":3,"sources":["components/Users/User/Edit.js"],"names":["UserEdit","Component","state","user","user_id","this","props","match","params","company_id","branch_id","grup_id","optionComapny","valueCompany","level_multicompany","identity","name","email","phone","address","level","password","unlimited","validity","Date","listCompany","listBranch","listGrup","listLevel","optionsGroup","valueGroup","responseMessage","handleChangeValidity","date","setState","console","log","onSubmitEditUser","e","preventDefault","formData","group","status","toISOString","split","toast","warning","API","put","API_SERVER","then","res","data","error","result","delete","i","length","post","Storage","get","history","push","onChangeInput","event","target","value","tempGroup","map","item","label","branch_name","showMultipleCompany","toggleSwitch","checked","except","company_name","filter","componentDidMount","group_id","Number","multi_company","levelUser","render","validityUser","className","onSubmit","Text","required","onChange","selected","style","textTransform","id","options","mode","removableTags","hasSelectAll","selectAllLabel","enableSearch","resetable","valuePlaceholder","evt","grup_name","type","placeholder","htmlFor","width","bind","dateFormat","marginTop","class","role"],"mappings":"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","file":"static/js/81.d5bce4b7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport API, { API_SERVER } from '../../../repository/api';\nimport Storage from '../../../repository/storage';\nimport ToggleSwitch from \"react-switch\";\nimport { Form } from 'react-bootstrap';\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { MultiSelect } from 'react-sm-select';\nimport 'react-sm-select/dist/styles.css';\nimport { toast } from \"react-toastify\";\n\nclass UserEdit extends Component {\n  state = {\n    user: null,\n    user_id: this.props.match.params.user_id,\n\n    company_id: \"\",\n    branch_id: \"\",\n    grup_id: \"\",\n    optionComapny: [],\n    valueCompany: [],\n    level_multicompany: 'client',\n\n    identity: \"\",\n    name: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    level: \"\",\n    password: \"\",\n    unlimited: false,\n    validity: new Date(),\n\n    listCompany: [],\n    listBranch: [],\n    listGrup: [],\n    listLevel: [],\n    optionsGroup: [],\n    valueGroup: [],\n\n    responseMessage: \"\"\n  };\n\n  handleChangeValidity = date => {\n    this.setState({\n      validity: date\n    });\n    console.log('XX datepicker', date)\n    console.log('XX state', this.state.validity)\n  };\n\n  toggleSwitch(checked) {\n    this.setState({ unlimited: !this.state.unlimited });\n  }\n  onSubmitEditUser = e => {\n    e.preventDefault();\n    let unlimited = this.state.unlimited == false ? '1' : '0'\n\n    let formData = {\n      company_id: this.state.company_id,\n      // branch_id: this.state.branch_id,\n      group: this.state.valueGroup,\n      grup_id: this.state.grup_id,\n      identity: this.state.identity,\n      name: this.state.name,\n      email: this.state.email,\n      phone: this.state.phone,\n      address: this.state.address,\n      level: this.state.level,\n      status: \"active\",\n      unlimited: unlimited,\n      validity: this.state.validity.toISOString().split('T')[0]\n    };\n    if (\n      formData.company_id === '' ||\n      formData.group == '' ||\n      formData.grup_id === '' ||\n      formData.name === '' ||\n      formData.identity === '' ||\n      formData.email === '' ||\n      formData.level === ''\n    ) {\n      toast.warning('Please fill required field.')\n    }\n    else {\n      API.put(`${API_SERVER}v1/user/${this.state.user_id}`, formData).then(\n        res => {\n          if (res.status === 200) {\n            if (res.data.error) {\n\n              this.setState({ responseMessage: res.data.result })\n            } else {\n\n              if (this.state.password !== \"\") {\n                let formData = { password: this.state.password };\n                API.put(\n                  `${API_SERVER}v1/user/password/${this.state.user_id}`,\n                  formData\n                ).then(res => {\n                  console.log(\"pass: \", res.data);\n                });\n              }\n              API.delete(`${API_SERVER}v1/user/assign/${this.state.user_id}`).then(res => {\n                if (res.status === 200) {\n                  for (let i = 0; i < this.state.valueCompany.length; i++) {\n                    let formData = {\n                      user_id: this.state.user_id,\n                      company_id: this.state.valueCompany[i],\n                      level_multicompany: this.state.level_multicompany\n                    };\n                    API.post(`${API_SERVER}v1/user/assign`, formData)\n                  }\n                }\n              })\n\n              if (Storage.get(\"user\").data.level === \"superadmin\") {\n                this.props.history.push(`/company-detail-super/${formData.company_id}`)\n              } else {\n                this.props.history.push(`/user-company/${this.state.company_id}`);\n              }\n            }\n          }\n        }\n      );\n    }\n  };\n\n  onChangeInput = event => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    if (name === \"company_id\") {\n      API.get(`${API_SERVER}v1/branch/company/${value}`).then(res => {\n        if (res.status === 200) {\n          this.setState({ listBranch: res.data.result[0], company_id: value, listGrup: res.data.result[1] });\n          let tempGroup = [];\n          res.data.result[0].map(item => {\n            tempGroup.push({ value: item.branch_id, label: item.branch_name });\n          });\n          this.setState({ valueGroup: [] })\n          this.setState({ optionsGroup: tempGroup })\n          this.showMultipleCompany(value)\n        }\n      });\n    } else {\n      this.setState({\n        [name]: value\n      });\n    }\n  };\n\n  showMultipleCompany(except) {\n    API.get(`${API_SERVER}v1/company`).then(res => {\n      this.setState({ valueCompany: [] })\n      this.setState({ optionComapny: [] })\n      res.data.result.map(item => {\n        this.state.optionComapny.push({ value: item.company_id, label: item.company_name });\n      });\n      this.setState({\n        optionComapny: this.state.optionComapny.filter(item => item.value != except),\n      })\n    });\n  }\n  componentDidMount() {\n    let valueGroup = [];\n    API.get(`${API_SERVER}v1/user/${this.state.user_id}`).then(res => {\n      if (res.status === 200) {\n        let unlimited = res.data.result.unlimited == 0 ? true : false;\n        this.setState({\n          user: res.data.result,\n          company_id: res.data.result.company_id,\n          branch_id: res.data.result.branch_id,\n          grup_id: res.data.result.grup_id,\n          name: res.data.result.name,\n          identity: res.data.result.identity,\n          email: res.data.result.email,\n          phone: res.data.result.phone,\n          address: res.data.result.address,\n          level: res.data.result.level,\n          unlimited: unlimited,\n          validity: new Date(res.data.result.validity),\n          level_multicompany: res.data.result.level_multicompany\n        });\n        valueGroup = res.data.result.group_id ? res.data.result.group_id.split(',').map(Number) : [];\n\n        API.get(`${API_SERVER}v1/company`).then(res => {\n          if (res.status === 200) {\n            this.setState({ listCompany: res.data.result });\n          }\n          res.data.result.map(item => {\n            this.state.optionComapny.push({ value: item.company_id, label: item.company_name });\n          });\n          this.setState({\n            optionComapny: this.state.optionComapny.filter(item => item.value != this.state.company_id),\n          })\n        });\n\n        API.get(\n          `${API_SERVER}v1/branch/company/${this.state.user.company_id}`\n        ).then(res => {\n          if (res.status === 200) {\n            this.setState({ listBranch: res.data.result[0], listGrup: res.data.result[1] });\n            let tempGroup = [];\n            res.data.result[0].map(item => {\n              tempGroup.push({ value: item.branch_id, label: item.branch_name });\n            });\n            this.setState({ optionsGroup: tempGroup })\n          }\n        });\n\n        API.get(\n          `${API_SERVER}v1/user/assign/${this.state.user_id}`\n        ).then(res => {\n          if (res.status === 200) {\n            this.setState({ valueCompany: res.data.result.multi_company })\n            this.setState({ valueGroup: valueGroup })\n          }\n        });\n\n        const levelUser = [\n          { level: \"superadmin\" },\n          { level: \"admin\" },\n          { level: \"client\" }\n        ];\n        this.setState({ listLevel: levelUser });\n      }\n    });\n  }\n\n  render() {\n    let validityUser = \"\";\n    if (this.state.validity !== \"\") {\n      validityUser = new Date(this.state.validity);\n    }\n    const levelUser = this.state.listLevel;\n\n    return (\n      <div className=\"pcoded-main-container\">\n        <div className=\"pcoded-wrapper\">\n          <div className=\"pcoded-content\">\n            <div className=\"pcoded-inner-content\">\n              <div className=\"main-body\">\n                <div className=\"page-wrapper\">\n                  <div className=\"row\">\n                    <div className=\"col-xl-12\">\n                      <h3 className=\"f-24 f-w-800\">Edit User Management</h3>\n                      <div className=\"card\">\n                        <div className=\"card-block\">\n                          <form onSubmit={this.onSubmitEditUser}>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Company</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <select\n                                required\n                                className=\"form-control\"\n                                name=\"company_id\"\n                                onChange={this.onChangeInput}\n                              >\n                                <option value=\"\">-- Select --</option>\n                                {this.state.listCompany.map(item => (\n                                  <option\n                                    value={item.company_id}\n                                    selected={\n                                      item.company_id ===\n                                        this.state.user.company_id\n                                        ? \"selected\"\n                                        : \"\"\n                                    }\n                                  >\n                                    {item.company_name}\n                                  </option>\n                                ))}\n                              </select>\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Level</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <select\n                                style={{ textTransform: 'capitalize' }}\n                                name=\"level\"\n                                className=\"form-control\"\n                                onChange={this.onChangeInput}\n                                required\n                              >\n                                <option value=\"\">-- Select --</option>\n                                {levelUser.map(item => (\n                                  <option\n                                    value={item.level}\n                                    selected={\n                                      item.level === this.state.user.level\n                                        ? \"selected\"\n                                        : \"\"\n                                    }\n                                  >\n                                    {item.level === 'client' ? 'User' : item.level}\n                                  </option>\n                                ))}\n                              </select>\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Multiple Company</label>\n                              <MultiSelect\n                                id=\"multicompany\"\n                                options={this.state.optionComapny}\n                                value={this.state.valueCompany}\n                                onChange={valueCompany => this.setState({ valueCompany })}\n                                mode=\"tags\"\n                                removableTags={true}\n                                hasSelectAll={true}\n                                selectAllLabel=\"Choose all\"\n                                enableSearch={true}\n                                resetable={true}\n                                valuePlaceholder=\"Select Company\"\n                              />\n                            </div>\n                            {\n                              this.state.valueCompany.length > 0 ?\n\n                                <div className=\"form-group\">\n                                  <label className=\"label-input\">Level Multicompany</label>\n                                  <Form.Text className=\"text-danger\">Required</Form.Text>\n                                  <select\n                                    style={{ textTransform: 'capitalize' }}\n                                    name=\"level_multicompany\"\n                                    className=\"form-control\"\n                                    onChange={evt => this.setState({ level_multicompany: evt.target.value })}\n                                    required\n                                  >\n                                    <option value=\"\">-- Select --</option>\n                                    {levelUser.map(item => (\n                                      <option\n                                        value={item.level}\n                                        selected={\n                                          item.level === this.state.level_multicompany\n                                            ? \"selected\"\n                                            : \"\"\n                                        }\n                                      >\n                                        {item.level === 'client' ? 'User' : item.level}\n                                      </option>\n                                    ))}\n                                  </select>\n                                </div>\n                                : null\n                            }\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Group</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <MultiSelect\n                                id=\"group\"\n                                options={this.state.optionsGroup}\n                                value={this.state.valueGroup}\n                                onChange={valueGroup => this.setState({ valueGroup })}\n                                mode=\"tags\"\n                                enableSearch={true}\n                                resetable={true}\n                                valuePlaceholder=\"Select Group\"\n                              />\n                              {/* <select\n                                required\n                                className=\"form-control\"\n                                name=\"branch_id\"\n                                onChange={this.onChangeInput}\n                              >\n                                <option value=\"\">-- Select --</option>\n                                {this.state.listBranch.map(item => (\n                                  <option\n                                    value={item.branch_id}\n                                    selected={\n                                      item.branch_id ===\n                                      this.state.user.branch_id\n                                        ? \"selected\"\n                                        : \"\"\n                                    }\n                                  >\n                                    {item.branch_name}\n                                  </option>\n                                ))}\n                              </select> */}\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Role</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <select\n                                required\n                                className=\"form-control\"\n                                name=\"grup_id\"\n                                onChange={this.onChangeInput}\n                              >\n                                <option value=\"\">-- Select --</option>\n                                {this.state.listGrup.map(item => (\n                                  <option\n                                    value={item.grup_id}\n                                    selected={\n                                      item.grup_id ===\n                                        this.state.user.grup_id\n                                        ? \"selected\"\n                                        : \"\"\n                                    }\n                                  >\n                                    {item.grup_name}\n                                  </option>\n                                ))}\n                              </select>\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\"> Name </label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                required\n                                type=\"text\"\n                                name=\"name\"\n                                className=\"form-control\"\n                                placeholder=\"Name\"\n                                value={this.state.name}\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\"> Registration Number </label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"text\"\n                                required\n                                name=\"identity\"\n                                className=\"form-control\"\n                                placeholder=\"210-1971-74\"\n                                value={this.state.identity}\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Email</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"email\"\n                                required\n                                name=\"email\"\n                                value={this.state.email}\n                                className=\"form-control\"\n                                placeholder=\"rakaal@gmail.com\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Phone</label>\n                              <input\n                                type=\"text\"\n                                name=\"phone\"\n                                value={this.state.phone}\n                                className=\"form-control\"\n                                placeholder=\"081-247-9592\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Address</label>\n                              <textarea\n                                value={this.state.address}\n                                name=\"address\"\n                                className=\"form-control\"\n                                placeholder=\"Address\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            {/* <div className=\"form-group\">\n                              <label className=\"label-input\">Password</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"password\"\n                                name=\"password\"\n                                className=\"form-control\"\n                                placeholder=\"password\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div> */}\n                            <div className=\"form-group\">\n                              <label className=\"label-input\" htmlFor>\n                                Time Limit\n                              </label>\n                              <div style={{ width: '100%' }}>\n                                <ToggleSwitch checked={false} onChange={this.toggleSwitch.bind(this)} checked={this.state.unlimited} />\n                              </div>\n\n                            </div>\n                            {\n                              this.state.unlimited &&\n                              <div className=\"form-group\">\n                                <label className=\"label-input\" htmlFor>\n                                  Valid Until\n                                </label>\n                                <div style={{ width: '100%' }}>\n                                  <DatePicker\n                                    selected={validityUser}\n                                    onChange={this.handleChangeValidity}\n                                    dateFormat=\"yyyy-MM-dd\"\n                                  />\n                                </div>\n\n                              </div>\n                            }\n                            <div style={{ marginTop: '50px' }}>\n                              {\n                                this.state.responseMessage &&\n                                <div class=\"alert alert-primary\" role=\"alert\">\n                                  <b>ALERT</b> Please check you data before submit. {this.state.responseMessage}\n                                </div>\n                              }\n                            </div>\n                            <button\n                              type=\"submit\"\n                              className=\"btn btn-primary btn-block m-t-100 f-20 f-w-600\"\n                            >\n                              Save\n                            </button>\n                          </form>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserEdit;\n"],"sourceRoot":""}