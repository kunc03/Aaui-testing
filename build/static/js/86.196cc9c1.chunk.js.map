{"version":3,"sources":["components/Users/User/add.js"],"names":["UserAdd","state","company_id","branch_id","optionComapny","valueCompany","level_multicompany","identity","name","email","alertemail","phone","address","password","level","unlimited","validity","Date","listCompany","listBranch","listGrup","responseMessage","responseEmail","responsePhone","optionsGroup","valueGroup","isbuttonDisabled","handleChangeValidity","date","setState","onChangeInput","event","target","value","API","get","API_SERVER","then","res","data","error","setTimeout","status","result","map","item","push","label","branch_name","showMultipleCompany","submitForm","e","preventDefault","formData","multi_company","grup_id","group","toISOString","split","toast","warning","post","userId","user_id","delete","i","length","props","history","checked","this","except","company_name","filter","levelUser","className","onSubmit","Text","required","onChange","style","textTransform","id","options","mode","removableTags","hasSelectAll","selectAllLabel","enableSearch","resetable","valuePlaceholder","evt","grup_name","type","placeholder","htmlFor","width","toggleSwitch","bind","selected","showTimeSelect","dateFormat","marginTop","class","role","disabled","Component"],"mappings":"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","file":"static/js/86.196cc9c1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\nimport API, { API_SERVER } from '../../../repository/api';\r\nimport ToggleSwitch from \"react-switch\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { MultiSelect } from 'react-sm-select';\r\nimport 'react-sm-select/dist/styles.css';\r\nimport { toast } from \"react-toastify\";\r\n\r\nclass UserAdd extends Component {\r\n\r\n  state = {\r\n    company_id: \"\",\r\n    branch_id: \"\",\r\n\r\n    optionComapny: [],\r\n    valueCompany: [],\r\n    level_multicompany: 'client',\r\n\r\n    identity: \"\",\r\n    name: \"\",\r\n    email: \"\",\r\n    alertemail: \"\",\r\n    phone: \"\",\r\n    address: \"\",\r\n    password: \"\",\r\n    level: \"\",\r\n    unlimited: false,\r\n    validity: new Date(),\r\n\r\n    listCompany: [],\r\n    listBranch: [],\r\n    listGrup: [],\r\n\r\n    responseMessage: '',\r\n    responseEmail: '',\r\n    responsePhone: '',\r\n    optionsGroup: [],\r\n    valueGroup: [],\r\n    isbuttonDisabled: false,\r\n  };\r\n\r\n\r\n  handleChangeValidity = date => {\r\n    this.setState({\r\n      validity: date\r\n    });\r\n  };\r\n\r\n  toggleSwitch(checked) {\r\n    this.setState({ unlimited: !this.state.unlimited });\r\n  }\r\n\r\n  onChangeInput = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    if (name === 'email') {\r\n      this.setState({isbuttonDisabled : true});\r\n      \r\n      API.get(`${API_SERVER}v1/user/cek/email/${value}`).then(res => {\r\n        if (res.data.error) {\r\n          target.value = ''\r\n          this.setState({ alertemail: 'Email sudah terdaftar dan aktif. gunakan email lain' })\r\n        } else {\r\n          this.setState({ [name]: value, alertemail: '' });\r\n          setTimeout(() => {\r\n            this.setState({isbuttonDisabled : false});\r\n          }, 600);\r\n        }\r\n      })\r\n    }\r\n    else if (name === 'company_id') {\r\n      API.get(`${API_SERVER}v1/branch/company/${value}`).then(res => {\r\n        if (res.status === 200) {\r\n          this.setState({ listBranch: res.data.result[0], company_id: value, listGrup: res.data.result[1] })\r\n          res.data.result[0].map(item => {\r\n            this.state.optionsGroup.push({ value: item.branch_id, label: item.branch_name });\r\n          });\r\n          this.showMultipleCompany(value)\r\n        }\r\n      })\r\n    } else {\r\n      this.setState({\r\n        [name]: value\r\n      });\r\n    }\r\n  }\r\n  //\r\n  submitForm = e => {\r\n    e.preventDefault();\r\n    let unlimited = this.state.unlimited == false ? '1' : '0'\r\n    const formData = {\r\n      company_id: this.state.company_id,\r\n      multi_company: this.state.valueCompany,\r\n      // branch_id: this.state.branch_id,\r\n      branch_id: 0,\r\n      grup_id: this.state.grup_id,\r\n      group: this.state.valueGroup,\r\n      identity: this.state.identity,\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      phone: this.state.phone,\r\n      address: this.state.address,\r\n      level: this.state.level,\r\n      status: 'active',\r\n      unlimited: unlimited,\r\n      validity: this.state.validity.toISOString().split('T')[0]\r\n    };\r\n\r\n    if (\r\n      formData.company_id === '' ||\r\n      formData.group == '' ||\r\n      formData.grup_id === '' ||\r\n      formData.name === '' ||\r\n      formData.identity === '' ||\r\n      formData.email === '' ||\r\n      formData.level === ''\r\n    ) {\r\n      toast.warning('Please fill required field.')\r\n    }\r\n    else {\r\n      API.post(`${API_SERVER}v1/user`, formData).then(res => {\r\n        if (res.status === 200) {\r\n          if (res.data.error) {\r\n            this.setState({ responseMessage: res.data.result })\r\n          } else {\r\n            let userId = res.data.result.user_id;\r\n            API.delete(`${API_SERVER}v1/user/assign/${res.data.result.user_id}`).then(res => {\r\n              if (res.status === 200) {\r\n                for (let i = 0; i < this.state.valueCompany.length; i++) {\r\n                  let formData = {\r\n                    user_id: userId,\r\n                    company_id: this.state.valueCompany[i],\r\n                    level_multicompany: this.state.level_multicompany\r\n                  };\r\n                  API.post(`${API_SERVER}v1/user/assign`, formData)\r\n                }\r\n              }\r\n            })\r\n            this.props.history.push(`/company-detail-super/${formData.company_id}`)\r\n          }\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  showMultipleCompany(except) {\r\n    API.get(`${API_SERVER}v1/company`).then(res => {\r\n      this.setState({ valueCompany: [] })\r\n      this.setState({ optionComapny: [] })\r\n      res.data.result.map(item => {\r\n        this.state.optionComapny.push({ value: item.company_id, label: item.company_name });\r\n      });\r\n      this.setState({\r\n        optionComapny: this.state.optionComapny.filter(item => item.value != except),\r\n      })\r\n    });\r\n  }\r\n  componentDidMount() {\r\n    API.get(`${API_SERVER}v1/company`).then(res => {\r\n      if (res.status === 200) {\r\n        this.setState({ listCompany: res.data.result })\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const levelUser = [{ level: 'superadmin' }, { level: 'admin' }, { level: 'client' }];\r\n    return (\r\n      <div className=\"pcoded-main-container\">\r\n        <div className=\"pcoded-wrapper\">\r\n          <div className=\"pcoded-content\">\r\n            <div className=\"pcoded-inner-content\">\r\n              <div className=\"main-body\">\r\n                <div className=\"page-wrapper\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-xl-12\">\r\n                      <h3 className=\"f-24 f-w-800\">Add User Management</h3>\r\n                      <div className=\"card\">\r\n                        <div className=\"card-block\">\r\n\r\n                          <form onSubmit={event => this.submitForm(event)}>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Company</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <select required className=\"form-control\" name=\"company_id\" onChange={this.onChangeInput}>\r\n                                <option value=\"\">-- Select --</option>\r\n                                {\r\n                                  this.state.listCompany.map(item => (\r\n                                    <option value={item.company_id}>{item.company_name}</option>\r\n                                  ))\r\n                                }\r\n                              </select>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Level</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <select style={{ textTransform: 'capitalize' }} name=\"level\" className=\"form-control\" onChange={this.onChangeInput} required>\r\n                                <option value=\"\">-- Select --</option>\r\n                                {\r\n                                  levelUser.map(item => (\r\n                                    <option value={item.level}>{item.level === 'client' ? 'User' : item.level}</option>\r\n                                  ))\r\n                                }\r\n                              </select>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Multiple Company</label>\r\n                              <MultiSelect\r\n                                id=\"multicompany\"\r\n                                options={this.state.optionComapny}\r\n                                value={this.state.valueCompany}\r\n                                onChange={valueCompany => this.setState({ valueCompany })}\r\n                                mode=\"tags\"\r\n                                removableTags={true}\r\n                                hasSelectAll={true}\r\n                                selectAllLabel=\"Choose all\"\r\n                                enableSearch={true}\r\n                                resetable={true}\r\n                                valuePlaceholder=\"Select Company\"\r\n                              />\r\n                            </div>\r\n\r\n                            {\r\n                              this.state.valueCompany.length > 0 ?\r\n\r\n                                <div className=\"form-group\">\r\n                                  <label className=\"label-input\">Level Multicompany</label>\r\n                                  <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                                  <select style={{ textTransform: 'capitalize' }} name=\"level_multicompany\" className=\"form-control\" onChange={evt => this.setState({ level_multicompany: evt.target.value })} >\r\n                                    <option value=\"\">-- Select --</option>\r\n                                    {\r\n                                      levelUser.map(item => (\r\n                                        <option value={item.level}>{item.level === 'client' ? 'User' : item.level}</option>\r\n                                      ))\r\n                                    }\r\n                                  </select>\r\n                                </div>\r\n                                : null\r\n                            }\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Group</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <MultiSelect\r\n                                id=\"group\"\r\n                                options={this.state.optionsGroup}\r\n                                value={this.state.valueGroup}\r\n                                onChange={valueGroup => this.setState({ valueGroup })}\r\n                                mode=\"tags\"\r\n                                enableSearch={true}\r\n                                resetable={true}\r\n                                valuePlaceholder=\"Select Group\"\r\n                              />\r\n                              {/* <select required className=\"form-control\" name=\"branch_id\" onChange={this.onChangeInput}>\r\n                                <option value=\"\">-- Select --</option>\r\n                                {\r\n                                  this.state.listBranch.map(item => (\r\n                                    <option value={item.branch_id}>{item.branch_name}</option>\r\n                                  ))\r\n                                }\r\n                              </select> */}\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Role</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <select required className=\"form-control\" name=\"grup_id\" onChange={this.onChangeInput}>\r\n                                <option value=\"\">-- Select --</option>\r\n                                {\r\n                                  this.state.listGrup.map(item => (\r\n                                    <option value={item.grup_id}>{item.grup_name}</option>\r\n                                  ))\r\n                                }\r\n                              </select>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\"> Name </label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                required\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Name\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\"> Registration Number </label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                type=\"text\"\r\n                                required\r\n                                name=\"identity\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"001\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Email</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                type=\"email\"\r\n                                required\r\n                                name=\"email\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"example@domain.com\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                              <Form.Text className=\"text-danger\">{this.state.alertemail}</Form.Text>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Phone</label>\r\n                              <input\r\n                                type=\"text\"\r\n                                name=\"phone\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"08119680220\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Address</label>\r\n                              <textarea name=\"address\" className=\"form-control\" placeholder=\"Address\" onChange={this.onChangeInput}></textarea>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\" htmlFor>\r\n                                Time Limit\r\n                              </label>\r\n                              <div style={{ width: '100%' }}>\r\n                                <ToggleSwitch checked={false} onChange={this.toggleSwitch.bind(this)} checked={this.state.unlimited} />\r\n                              </div>\r\n\r\n                            </div>\r\n                            {\r\n                              this.state.unlimited &&\r\n                              <div className=\"form-group\">\r\n                                <label className=\"label-input\" htmlFor>\r\n                                  Valid Until\r\n                                </label>\r\n                                <div style={{ width: '100%' }}>\r\n                                  <DatePicker\r\n                                    selected={this.state.validity}\r\n                                    onChange={this.handleChangeValidity}\r\n                                    showTimeSelect\r\n                                    dateFormat=\"yyyy-MM-dd\"\r\n                                  />\r\n                                </div>\r\n\r\n                              </div>\r\n                            }\r\n                            <div style={{ marginTop: '50px' }}>\r\n                              {\r\n                                this.state.responseMessage &&\r\n                                <div class=\"alert alert-primary\" role=\"alert\">\r\n                                  <b>ALERT</b> Please check you data before submit. {this.state.responseMessage}\r\n                                </div>\r\n                              }\r\n                            </div>\r\n                            <button type=\"submit\" className=\"btn btn-primary btn-block m-t-100 f-20 f-w-600\" disabled={this.state.isbuttonDisabled}>\r\n                              Save\r\n                            </button>\r\n                          </form>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserAdd;\r\n"],"sourceRoot":""}