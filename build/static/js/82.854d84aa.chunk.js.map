{"version":3,"sources":["components/Users/User/add.js"],"names":["UserAdd","Component","state","company_id","branch_id","optionComapny","valueCompany","level_multicompany","identity","name","email","alertemail","phone","address","password","level","unlimited","validity","Date","listCompany","listBranch","listGrup","responseMessage","responseEmail","responsePhone","optionsGroup","valueGroup","isbuttonDisabled","handleChangeValidity","date","this","setState","onChangeInput","event","target","value","API","get","API_SERVER","then","res","data","error","setTimeout","status","result","map","item","push","label","branch_name","showMultipleCompany","submitForm","e","preventDefault","formData","multi_company","grup_id","group","toISOString","split","toast","warning","post","userId","user_id","delete","i","length","props","history","toggleSwitch","checked","except","company_name","filter","componentDidMount","render","levelUser","className","onSubmit","Text","required","onChange","style","textTransform","id","options","mode","removableTags","hasSelectAll","selectAllLabel","enableSearch","resetable","valuePlaceholder","evt","grup_name","type","placeholder","htmlFor","width","bind","selected","showTimeSelect","dateFormat","marginTop","class","role","disabled"],"mappings":"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","file":"static/js/82.854d84aa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Form } from 'react-bootstrap';\nimport API, { API_SERVER } from '../../../repository/api';\nimport ToggleSwitch from \"react-switch\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { MultiSelect } from 'react-sm-select';\nimport 'react-sm-select/dist/styles.css';\nimport { toast } from \"react-toastify\";\n\nclass UserAdd extends Component {\n\n  state = {\n    company_id: \"\",\n    branch_id: \"\",\n\n    optionComapny: [],\n    valueCompany: [],\n    level_multicompany: 'client',\n\n    identity: \"\",\n    name: \"\",\n    email: \"\",\n    alertemail: \"\",\n    phone: \"\",\n    address: \"\",\n    password: \"\",\n    level: \"\",\n    unlimited: false,\n    validity: new Date(),\n\n    listCompany: [],\n    listBranch: [],\n    listGrup: [],\n\n    responseMessage: '',\n    responseEmail: '',\n    responsePhone: '',\n    optionsGroup: [],\n    valueGroup: [],\n    isbuttonDisabled: false,\n  };\n\n\n  handleChangeValidity = date => {\n    this.setState({\n      validity: date\n    });\n  };\n\n  toggleSwitch(checked) {\n    this.setState({ unlimited: !this.state.unlimited });\n  }\n\n  onChangeInput = (event) => {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    if (name === 'email') {\n      this.setState({isbuttonDisabled : true});\n      \n      API.get(`${API_SERVER}v1/user/cek/email/${value}`).then(res => {\n        if (res.data.error) {\n          target.value = ''\n          this.setState({ alertemail: 'Email sudah terdaftar dan aktif. gunakan email lain' })\n        } else {\n          this.setState({ [name]: value, alertemail: '' });\n          setTimeout(() => {\n            this.setState({isbuttonDisabled : false});\n          }, 600);\n        }\n      })\n    }\n    else if (name === 'company_id') {\n      API.get(`${API_SERVER}v1/branch/company/${value}`).then(res => {\n        if (res.status === 200) {\n          this.setState({ listBranch: res.data.result[0], company_id: value, listGrup: res.data.result[1] })\n          res.data.result[0].map(item => {\n            this.state.optionsGroup.push({ value: item.branch_id, label: item.branch_name });\n          });\n          this.showMultipleCompany(value)\n        }\n      })\n    } else {\n      this.setState({\n        [name]: value\n      });\n    }\n  }\n  //\n  submitForm = e => {\n    e.preventDefault();\n    let unlimited = this.state.unlimited == false ? '1' : '0'\n    const formData = {\n      company_id: this.state.company_id,\n      multi_company: this.state.valueCompany,\n      // branch_id: this.state.branch_id,\n      branch_id: 0,\n      grup_id: this.state.grup_id,\n      group: this.state.valueGroup,\n      identity: this.state.identity,\n      name: this.state.name,\n      email: this.state.email,\n      phone: this.state.phone,\n      address: this.state.address,\n      level: this.state.level,\n      status: 'active',\n      unlimited: unlimited,\n      validity: this.state.validity.toISOString().split('T')[0]\n    };\n\n    if (\n      formData.company_id === '' ||\n      formData.group == '' ||\n      formData.grup_id === '' ||\n      formData.name === '' ||\n      formData.identity === '' ||\n      formData.email === '' ||\n      formData.level === ''\n    ) {\n      toast.warning('Please fill required field.')\n    }\n    else {\n      API.post(`${API_SERVER}v1/user`, formData).then(res => {\n        if (res.status === 200) {\n          if (res.data.error) {\n            this.setState({ responseMessage: res.data.result })\n          } else {\n            let userId = res.data.result.user_id;\n            API.delete(`${API_SERVER}v1/user/assign/${res.data.result.user_id}`).then(res => {\n              if (res.status === 200) {\n                for (let i = 0; i < this.state.valueCompany.length; i++) {\n                  let formData = {\n                    user_id: userId,\n                    company_id: this.state.valueCompany[i],\n                    level_multicompany: this.state.level_multicompany\n                  };\n                  API.post(`${API_SERVER}v1/user/assign`, formData)\n                }\n              }\n            })\n            this.props.history.push(`/company-detail-super/${formData.company_id}`)\n          }\n        }\n      })\n    }\n  };\n\n  showMultipleCompany(except) {\n    API.get(`${API_SERVER}v1/company`).then(res => {\n      this.setState({ valueCompany: [] })\n      this.setState({ optionComapny: [] })\n      res.data.result.map(item => {\n        this.state.optionComapny.push({ value: item.company_id, label: item.company_name });\n      });\n      this.setState({\n        optionComapny: this.state.optionComapny.filter(item => item.value != except),\n      })\n    });\n  }\n  componentDidMount() {\n    API.get(`${API_SERVER}v1/company`).then(res => {\n      if (res.status === 200) {\n        this.setState({ listCompany: res.data.result })\n      }\n    });\n  }\n\n  render() {\n    const levelUser = [{ level: 'superadmin' }, { level: 'admin' }, { level: 'client' }];\n    return (\n      <div className=\"pcoded-main-container\">\n        <div className=\"pcoded-wrapper\">\n          <div className=\"pcoded-content\">\n            <div className=\"pcoded-inner-content\">\n              <div className=\"main-body\">\n                <div className=\"page-wrapper\">\n                  <div className=\"row\">\n                    <div className=\"col-xl-12\">\n                      <h3 className=\"f-24 f-w-800\">Add User Management</h3>\n                      <div className=\"card\">\n                        <div className=\"card-block\">\n\n                          <form onSubmit={event => this.submitForm(event)}>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Company</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <select required className=\"form-control\" name=\"company_id\" onChange={this.onChangeInput}>\n                                <option value=\"\">-- Select --</option>\n                                {\n                                  this.state.listCompany.map(item => (\n                                    <option value={item.company_id}>{item.company_name}</option>\n                                  ))\n                                }\n                              </select>\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Level</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <select style={{ textTransform: 'capitalize' }} name=\"level\" className=\"form-control\" onChange={this.onChangeInput} required>\n                                <option value=\"\">-- Select --</option>\n                                {\n                                  levelUser.map(item => (\n                                    <option value={item.level}>{item.level === 'client' ? 'User' : item.level}</option>\n                                  ))\n                                }\n                              </select>\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Multiple Company</label>\n                              <MultiSelect\n                                id=\"multicompany\"\n                                options={this.state.optionComapny}\n                                value={this.state.valueCompany}\n                                onChange={valueCompany => this.setState({ valueCompany })}\n                                mode=\"tags\"\n                                removableTags={true}\n                                hasSelectAll={true}\n                                selectAllLabel=\"Choose all\"\n                                enableSearch={true}\n                                resetable={true}\n                                valuePlaceholder=\"Select Company\"\n                              />\n                            </div>\n\n                            {\n                              this.state.valueCompany.length > 0 ?\n\n                                <div className=\"form-group\">\n                                  <label className=\"label-input\">Level Multicompany</label>\n                                  <Form.Text className=\"text-danger\">Required</Form.Text>\n                                  <select style={{ textTransform: 'capitalize' }} name=\"level_multicompany\" className=\"form-control\" onChange={evt => this.setState({ level_multicompany: evt.target.value })} >\n                                    <option value=\"\">-- Select --</option>\n                                    {\n                                      levelUser.map(item => (\n                                        <option value={item.level}>{item.level === 'client' ? 'User' : item.level}</option>\n                                      ))\n                                    }\n                                  </select>\n                                </div>\n                                : null\n                            }\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Group</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <MultiSelect\n                                id=\"group\"\n                                options={this.state.optionsGroup}\n                                value={this.state.valueGroup}\n                                onChange={valueGroup => this.setState({ valueGroup })}\n                                mode=\"tags\"\n                                enableSearch={true}\n                                resetable={true}\n                                valuePlaceholder=\"Select Group\"\n                              />\n                              {/* <select required className=\"form-control\" name=\"branch_id\" onChange={this.onChangeInput}>\n                                <option value=\"\">-- Select --</option>\n                                {\n                                  this.state.listBranch.map(item => (\n                                    <option value={item.branch_id}>{item.branch_name}</option>\n                                  ))\n                                }\n                              </select> */}\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Role</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <select required className=\"form-control\" name=\"grup_id\" onChange={this.onChangeInput}>\n                                <option value=\"\">-- Select --</option>\n                                {\n                                  this.state.listGrup.map(item => (\n                                    <option value={item.grup_id}>{item.grup_name}</option>\n                                  ))\n                                }\n                              </select>\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\"> Name </label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                required\n                                type=\"text\"\n                                name=\"name\"\n                                className=\"form-control\"\n                                placeholder=\"Name\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\"> Registration Number </label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"text\"\n                                required\n                                name=\"identity\"\n                                className=\"form-control\"\n                                placeholder=\"001\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Email</label>\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\n                              <input\n                                type=\"email\"\n                                required\n                                name=\"email\"\n                                className=\"form-control\"\n                                placeholder=\"example@domain.com\"\n                                onChange={this.onChangeInput}\n                              />\n                              <Form.Text className=\"text-danger\">{this.state.alertemail}</Form.Text>\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Phone</label>\n                              <input\n                                type=\"text\"\n                                name=\"phone\"\n                                className=\"form-control\"\n                                placeholder=\"08119680220\"\n                                onChange={this.onChangeInput}\n                              />\n                            </div>\n                            <div className=\"form-group\">\n                              <label className=\"label-input\">Address</label>\n                              <textarea name=\"address\" className=\"form-control\" placeholder=\"Address\" onChange={this.onChangeInput}></textarea>\n                            </div>\n\n                            <div className=\"form-group\">\n                              <label className=\"label-input\" htmlFor>\n                                Time Limit\n                              </label>\n                              <div style={{ width: '100%' }}>\n                                <ToggleSwitch checked={false} onChange={this.toggleSwitch.bind(this)} checked={this.state.unlimited} />\n                              </div>\n\n                            </div>\n                            {\n                              this.state.unlimited &&\n                              <div className=\"form-group\">\n                                <label className=\"label-input\" htmlFor>\n                                  Valid Until\n                                </label>\n                                <div style={{ width: '100%' }}>\n                                  <DatePicker\n                                    selected={this.state.validity}\n                                    onChange={this.handleChangeValidity}\n                                    showTimeSelect\n                                    dateFormat=\"yyyy-MM-dd\"\n                                  />\n                                </div>\n\n                              </div>\n                            }\n                            <div style={{ marginTop: '50px' }}>\n                              {\n                                this.state.responseMessage &&\n                                <div class=\"alert alert-primary\" role=\"alert\">\n                                  <b>ALERT</b> Please check you data before submit. {this.state.responseMessage}\n                                </div>\n                              }\n                            </div>\n                            <button type=\"submit\" className=\"btn btn-primary btn-block m-t-100 f-20 f-w-600\" disabled={this.state.isbuttonDisabled}>\n                              Save\n                            </button>\n                          </form>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default UserAdd;\n"],"sourceRoot":""}