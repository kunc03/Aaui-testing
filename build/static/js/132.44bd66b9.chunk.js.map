{"version":3,"sources":["components/Users/User/companyadd.js"],"names":["UserAdd","state","company_id","branch_id","grup_id","identity","name","email","alertemail","phone","address","password","level","unlimited","validity","Date","listCompany","listBranch","listGrup","responseMessage","responseEmail","responsePhone","optionsGroup","valueGroup","handleChangeValidity","date","setState","onChangeInput","event","target","value","API","get","API_SERVER","then","res","data","error","length","slice","maxLength","submitForm","e","preventDefault","formData","group","status","toISOString","split","toast","warning","post","result","Storage","props","history","push","checked","this","USER_ME","localStorage","getItem","map","item","label","branch_name","className","onSubmit","Text","id","options","onChange","mode","enableSearch","resetable","valuePlaceholder","required","grup_name","type","placeholder","style","textTransform","htmlFor","width","toggleSwitch","bind","selected","showTimeSelect","dateFormat","marginTop","class","role","Component"],"mappings":"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","file":"static/js/132.44bd66b9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Form } from 'react-bootstrap';\r\nimport API, { USER_ME, API_SERVER } from '../../../repository/api';\r\nimport Storage from '../../../repository/storage';\r\nimport ToggleSwitch from \"react-switch\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { MultiSelect } from 'react-sm-select';\r\nimport { toast } from \"react-toastify\";\r\n\r\n\r\nclass UserAdd extends Component {\r\n\r\n  state = {\r\n    company_id: \"\",\r\n    branch_id: \"\",\r\n    grup_id: \"\",\r\n\r\n    identity: \"\",\r\n    name: \"\",\r\n    email: \"\",\r\n    alertemail: \"\",\r\n    phone: \"\",\r\n    address: \"\",\r\n    password: \"\",\r\n    level: \"\",\r\n    unlimited: false,\r\n    validity: new Date(),\r\n\r\n    listCompany: [],\r\n    listBranch: [],\r\n    listGrup: [],\r\n\r\n    responseMessage: '',\r\n    responseEmail: '',\r\n    responsePhone: '',\r\n    optionsGroup: [],\r\n    valueGroup: []\r\n  };\r\n\r\n  handleChangeValidity = date => {\r\n    this.setState({\r\n      validity: date\r\n    });\r\n  };\r\n\r\n  toggleSwitch(checked) {\r\n    this.setState({ unlimited: !this.state.unlimited });\r\n  }\r\n  onChangeInput = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    if (name === 'email') {\r\n      API.get(`${API_SERVER}v1/user/cek/email/${value}`).then(res => {\r\n        if (res.data.error) {\r\n          target.value = ''\r\n          this.setState({ alertemail: 'Email sudah terdaftar dan aktif. gunakan email lain' })\r\n        } else {\r\n          this.setState({ [name]: value, alertemail: '' })\r\n        }\r\n      })\r\n    } else if (name === 'address') {\r\n      if (value.length <= 100) {\r\n        this.setState({ [name]: value })\r\n      } else {\r\n        this.setState({ responseMessage: 'Cannot exceed the character limit.', [name]: value.slice(0, target.maxLength) })\r\n      }\r\n    } else {\r\n      this.setState({ [name]: value })\r\n    }\r\n\r\n  }\r\n\r\n  submitForm = e => {\r\n    e.preventDefault();\r\n    let unlimited = this.state.unlimited == false ? '1' : '0'\r\n    const formData = {\r\n      company_id: this.state.company_id,\r\n      // branch_id: this.state.branch_id,\r\n      branch_id: 0,\r\n      grup_id: this.state.grup_id,\r\n      group: this.state.valueGroup,\r\n      identity: this.state.identity,\r\n      name: this.state.name,\r\n      email: this.state.email,\r\n      phone: this.state.phone,\r\n      address: this.state.address,\r\n      password: this.state.password,\r\n      level: this.state.level,\r\n      status: 'active',\r\n      unlimited: unlimited,\r\n      validity: this.state.validity.toISOString().split('T')[0]\r\n    };\r\n\r\n    if (\r\n      formData.company_id === '' ||\r\n      formData.group == '' ||\r\n      formData.grup_id === '' ||\r\n      formData.name === '' ||\r\n      formData.identity === '' ||\r\n      formData.email === '' ||\r\n      formData.level === ''\r\n    ){\r\n      toast.warning('Please fill required field.')\r\n    }\r\n    else{\r\n      API.post(`${API_SERVER}v1/user`, formData).then(res => {\r\n        if (res.status === 200) {\r\n          if (res.data.error) {\r\n            this.setState({ responseMessage: res.data.result })\r\n          } else {\r\n            if (Storage.get('User').data.level === 'superadmin') {\r\n              this.props.history.push('/user')\r\n            }\r\n            else {\r\n              if (Storage.get('User').data.level === 'superadmin') {\r\n                this.props.history.push('/user')\r\n              }\r\n              else {\r\n                this.props.history.push('/my-company')\r\n              }\r\n            }\r\n          }\r\n        }\r\n      })\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    API.get(`${USER_ME}${Storage.get('user').data.email}`).then(res => {\r\n      if (res.status === 200) {\r\n        this.setState({ company_id: localStorage.getItem('companyID') ? localStorage.getItem('companyID') : res.data.result.company_id });\r\n\r\n        API.get(`${API_SERVER}v1/branch/company/${this.state.company_id}`).then(res => {\r\n          if (res.status === 200) {\r\n            this.setState({ listBranch: res.data.result[0] })\r\n            res.data.result[0].map(item => {\r\n              this.state.optionsGroup.push({ value: item.branch_id, label: item.branch_name });\r\n            });\r\n          }\r\n        })\r\n\r\n        API.get(`${API_SERVER}v1/grup/company/${this.state.company_id}`).then(res => {\r\n          if (res.status === 200) {\r\n            this.setState({ listGrup: res.data.result })\r\n          }\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const levelUser = [{ level: 'admin' }, { level: 'client' }];\r\n\r\n    return (\r\n      <div className=\"pcoded-main-container\">\r\n        <div className=\"pcoded-wrapper\">\r\n          <div className=\"pcoded-content\">\r\n            <div className=\"pcoded-inner-content\">\r\n              <div className=\"main-body\">\r\n                <div className=\"page-wrapper\">\r\n                  <div className=\"row\">\r\n                    <div className=\"col-xl-12\">\r\n                      <h3 className=\"f-24 f-w-800\">User Management</h3>\r\n                      <div className=\"card\">\r\n                        <div className=\"card-block\">\r\n\r\n                          <form onSubmit={event => this.submitForm(event)}>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Group</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <MultiSelect\r\n                                id=\"group\"\r\n                                options={this.state.optionsGroup}\r\n                                value={this.state.valueGroup}\r\n                                onChange={valueGroup => this.setState({ valueGroup })}\r\n                                mode=\"tags\"\r\n                                enableSearch={true}\r\n                                resetable={true}\r\n                                valuePlaceholder=\"Select Group\"\r\n                              />\r\n                              {/* <select required className=\"form-control\" name=\"branch_id\" onChange={this.onChangeInput}>\r\n                                <option value=\"\">-- Select --</option>\r\n                                {\r\n                                  this.state.listBranch.map(item => (\r\n                                    <option value={item.branch_id}>{item.branch_name}</option>\r\n                                  ))\r\n                                }\r\n                              </select> */}\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Role</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <select required className=\"form-control\" name=\"grup_id\" onChange={this.onChangeInput}>\r\n                                <option value=\"\">-- Select --</option>\r\n                                {\r\n                                  this.state.listGrup.map(item => (\r\n                                    <option value={item.grup_id}>{item.grup_name}</option>\r\n                                  ))\r\n                                }\r\n                              </select>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\"> Name </label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                required\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Name\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\"> Registration Number </label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                type=\"text\"\r\n                                required\r\n                                name=\"identity\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"001\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Email</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                type=\"email\"\r\n                                required\r\n                                name=\"email\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"example@domain.com\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                              <Form.Text className=\"text-danger\">{this.state.alertemail}</Form.Text>\r\n                              <Form.Text className=\"text-muted\">\r\n                                Pastikan isi sesuai dengan format email ex. user@email.com\r\n                              </Form.Text>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Phone</label>\r\n                              <input\r\n                                type=\"text\"\r\n                                name=\"phone\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"08119680220\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Address</label>\r\n                              <textarea maxLength=\"100\" name=\"address\" className=\"form-control\" placeholder=\"Address\" onChange={this.onChangeInput}></textarea>\r\n                              <Form.Text className=\"text-muted\">\r\n                                Maksimal 100 karakter untuk alamat\r\n                              </Form.Text>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Level</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <select name=\"level\" className=\"form-control\" onChange={this.onChangeInput} required style={{ textTransform: 'capitalize' }}>\r\n                                <option value=\"\">-- Select --</option>\r\n                                {\r\n                                  levelUser.map(item => (\r\n                                    <option value={item.level}>{item.level === 'client' ? 'User' : item.level}</option>\r\n                                  ))\r\n                                }\r\n                              </select>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\">Password</label>\r\n                              <Form.Text className=\"text-danger\">Required</Form.Text>\r\n                              <input\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                required\r\n                                className=\"form-control\"\r\n                                placeholder=\"Password\"\r\n                                onChange={this.onChangeInput}\r\n                              />\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                              <label className=\"label-input\" htmlFor>\r\n                                Time Limit\r\n                              </label>\r\n                              <div style={{ width: '100%' }}>\r\n                                <ToggleSwitch checked={false} onChange={this.toggleSwitch.bind(this)} checked={this.state.unlimited} />\r\n                              </div>\r\n\r\n                            </div>\r\n                            {\r\n                              this.state.unlimited &&\r\n                              <div className=\"form-group\">\r\n                                <label className=\"label-input\" htmlFor>\r\n                                  Valid Until\r\n                                </label>\r\n                                <div style={{ width: '100%' }}>\r\n                                  <DatePicker\r\n                                    selected={this.state.validity}\r\n                                    onChange={this.handleChangeValidity}\r\n                                    showTimeSelect\r\n                                    dateFormat=\"yyyy-MM-dd\"\r\n                                  />\r\n                                </div>\r\n\r\n                              </div>\r\n                            }\r\n                            <div style={{ marginTop: '50px' }}>\r\n                              {\r\n                                this.state.responseMessage &&\r\n                                <div class=\"alert alert-primary\" role=\"alert\">\r\n                                  <b>ALERT</b> Please check you data before submit. {this.state.responseMessage}\r\n                                </div>\r\n                              }\r\n                            </div>\r\n                            <button type=\"submit\" className=\"btn btn-primary btn-block m-t-10 f-20 f-w-600\">\r\n                              Save\r\n                            </button>\r\n                          </form>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserAdd;\r\n"],"sourceRoot":""}